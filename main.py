import r2pipe
import os
import re
import json
import networkx as nx
import numpy as np
import sys
import matplotlib.pyplot as plt

np.set_printoptions(threshold=np.inf)


def printAllFunction(f):
    """ Print all function from PE """

    x = f.cmdj("aflj")

    for i in range(0, int(f.cmd("aflc"))):
        data = json.dumps(x[i]['name'])
        if ("fcn." in data) or ("entry0" in data) :
            print(''.join(data))



def printMatrixOfBasicBloc(nameFunction, *args):
    """  
        Print adjacency_matrix of Graph
        if args = save, save the graph to png
    """
    G = initGraph()
    cpt = 0
    bb = f.cmd("afb fcn.1400195c0")
    #print(bb.splitlines())

    for i in bb.splitlines():
        index = i.split(' ')
        if cpt == 0:
            G.add_node(index[0], color='green', style='filled')
        elif cpt == G.number_of_nodes() -1 :
            G.add_node(index[0], color='red', style='filled')
        else:
            G.add_node(index[0])
        cpt = cpt + 1
        if "f" in index :
            G.add_edges_from([(index[0], index[5]),(index[0],index[7])], weight=1)
        elif "j" in index :
            G.add_edge(index[0], index[5], weight=1)
        else :
            pass

    colored_dict = nx.get_node_attributes(G, 'color')
    default_color = 'blue'
    color_seq = [colored_dict.get(node, default_color) for node in G.nodes()]
    print(args)
    if 'save' in args :
        print(nx.to_numpy_matrix(G))
        nx.draw(G, node_color=color_seq)
        plt.savefig("graph" + ".png")
    elif 'print' in args :
        [print(n, nbrdict) for n, nbrdict in G.adjacency()]
    else:
        print(nx.to_numpy_matrix(G))

    
def initGraph():
    return nx.MultiDiGraph()


if __name__=="__main__":
    f = r2pipe.open("./notepad.exe")
    f.cmd("e asm.bytes = 0")
    f.cmd("e scr.utf8 = true")
    f.cmd("aaa")
	
    printAllFunction(f)
    #printMatrixOfBasicBloc(G, "print")
